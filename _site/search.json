[
  {
    "objectID": "content.html",
    "href": "content.html",
    "title": "Content",
    "section": "",
    "text": "REDCapTidieR\n\n\nMaking analysts lives easier through the power of tidy tibbles\n\n\n\n\n\n\n\n\n\nAug 18, 2022\n\n\nRichard Hanna\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome",
    "section": "",
    "text": "This is the start of my website! More will be added later."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This is will be the about me section (under development)."
  },
  {
    "objectID": "presentations/REDCapTidieR.html#who-am-i",
    "href": "presentations/REDCapTidieR.html#who-am-i",
    "title": "REDCapTidieR",
    "section": "Who am I?",
    "text": "Who am I?\n\n\n\n\n\nCGT DataOps Data Scientist\n5 years at CHOP\nEngineering background\nTrying to implement quarto today1\n\n\n\n\nI am a data scientist in the Cell & Gene Therapy Data Operations team. I joined CHOP about 5 years ago coming from a mechanical engineering background and about 4 years ago found my way into coding with R to solve problems, make products, you name it. Around that same time I met Stephan Kadauke who leads the DataOps team and helped found the R User Group and that more or less brings me in front of you today.\nAround the same time I started using R I was working with REDCap, and I found that the two go hand in hand rather well. Today I‚Äôm excited to talk to you about a package we‚Äôre developing that, for those of you also working with both R and REDCap, may hopefully become a useful tool to help your analytic processes.\nA quick shoutout also to Jake Riley. This is my first time doing a quarto presentation (quarto is the new rmarkdown) and he helped considerably with my frustrations over getting tables to render better in the slides. So thanks Jake!\n\nHuge shoutout to Jake Riley for helping troubleshoot quarto and kableExtra"
  },
  {
    "objectID": "presentations/REDCapTidieR.html#r-medicine-2022",
    "href": "presentations/REDCapTidieR.html#r-medicine-2022",
    "title": "REDCapTidieR",
    "section": "R / Medicine 2022",
    "text": "R / Medicine 2022\n\n\n\n\n\n\nhttps://events.linuxfoundation.org/r-medicine/\n\n\nReal quick, before we jump into our talk wanted to give a brief announcement to remind or alert everyone to the upcoming R / Medicine conference. This will be an entirely virtual conference with the first two days dedicated to some excellent workshops and a series of speakers for the latter two, all of which can be found on the schedule at the website here."
  },
  {
    "objectID": "presentations/REDCapTidieR.html#r-medicine-2022---workshops",
    "href": "presentations/REDCapTidieR.html#r-medicine-2022---workshops",
    "title": "REDCapTidieR",
    "section": "R / Medicine 2022 - Workshops",
    "text": "R / Medicine 2022 - Workshops\n\n\nDiscount Code: RMED22CHOP for 10% off!"
  },
  {
    "objectID": "presentations/REDCapTidieR.html#r-medicine-2022---speaker-highlights",
    "href": "presentations/REDCapTidieR.html#r-medicine-2022---speaker-highlights",
    "title": "REDCapTidieR",
    "section": "R / Medicine 2022 - Speaker Highlights",
    "text": "R / Medicine 2022 - Speaker Highlights\n\nStephan Kadauke (CHOP CGT DataOps)\n\nR/Medicine 101: Intro to R for Clinical Data\nShould we Teach Data Science to Physicians-in-Training?\n\nJoy Payton (CHOP Arcus Education)\n\nUsing Public Data and Maps for Powerful Data Visualizations\n\nLihai Song (CHOP Data Scientist)\n\nAutomation of statistics summary and analysis using R Shiny\n\nJaclyn Janis (RStudio/Posit, CHOP Representative)\n\nIt‚Äôs time for nurses to learn R\n\n\n\nWe also have some familiar faces who will be delivering workdshops and talks including Stephan Kadauke, Joy Payton, and Lihai Song from CHOP as well as Jaclyn Janis our customer success rep from RStudio (now known as Posit)."
  },
  {
    "objectID": "presentations/REDCapTidieR.html#agenda",
    "href": "presentations/REDCapTidieR.html#agenda",
    "title": "REDCapTidieR",
    "section": "Agenda",
    "text": "Agenda\nIn today‚Äôs talk we will:\n\nReview what REDCap is üí°\nReview REDCapR as an extraction tool for the API üîå\nImplement REDCapTidieR to make our lives easier üßπ\n\nWhat you need:\n\nFamiliarity with R üíª\nFamiliarity with REDCap üß¢\n\n\nToday‚Äôs talk will primarily be beneficial to those of you who have some familiarity with R, namely how to work your way around with the tidyverse and especially those familiar with the REDCapR package, but we will also briefly touch on what REDCap is, how REDCapR works, and the use case that called for REDCapTidieR in the first place."
  },
  {
    "objectID": "presentations/REDCapTidieR.html#what-is-redcap",
    "href": "presentations/REDCapTidieR.html#what-is-redcap",
    "title": "REDCapTidieR",
    "section": "What is REDCap?",
    "text": "What is REDCap?\n\n\n\n\n\n\nFree1 database solution for research\nSecure and accessible from a web browser\nCan collect ‚Äúany type of data in any environment‚Äù\nParticularly useful for compliance with 21 CFR Part 11, HIPAA, etc.\nRequires little to get up and running, but offers complexity as needed\n\n\nREDCap is a powerful database solution used by many research institutions. The web interface offers a secure, accessible way to architect databases of varying complexity at no cost to the institution for joining the REDCap consortium.\nYou can access REDCap on the web from anywhere, and it can store any data you can realistically imagine for research purposes. It is also attractive to research institutions for being capable of clearance for various compliance requirements.\nIn my opinion, REDCap is strongest in it‚Äôs front end UI ability to supply users with the tools to make databases quickly and with plenty of customization, but also provides complexity to those who wish to use it.\n\nFor participants of the REDCap consortium"
  },
  {
    "objectID": "presentations/REDCapTidieR.html#what-is-redcap-1",
    "href": "presentations/REDCapTidieR.html#what-is-redcap-1",
    "title": "REDCapTidieR",
    "section": "What is REDCap?",
    "text": "What is REDCap?\n\n\nRecord Status Dashboard \n\nFront-End Data Entry UI \n\n\n\nREDCap functions as a large data table, but data distribution can be complex depending on architectural choices.\n\n\nRepeating instances can create headaches on the backend.\n\n\nThe REDCap front-end consists of many tools but the two we‚Äôre interested in are the top-level database display, known as the record status dashboard, and the actual area that data entry personnel enter data.\nHere on the left is a visual representation of what essentially amounts to a tabular structure. We have a record ID, and two ‚Äúinstruments‚Äù with underlying data. The first is a single sub-table or ‚Äúform‚Äù, while the second is stacked or ‚Äúrepeating.‚Äù We‚Äôll touch more on these shortly but they can be a bit cumbersome to work with.\nOn the right is a drilled-down display where the data gets entered. Here we see all of the Heroes Information associated with Record ID number 0. You can think of these as the column data elements tied to a single row for the hero A-Bomb.\nBecause of this, as mentioned earlier, REDCap can be about as complex as you want or need it to be."
  },
  {
    "objectID": "presentations/REDCapTidieR.html#the-super-heroes-dataset",
    "href": "presentations/REDCapTidieR.html#the-super-heroes-dataset",
    "title": "REDCapTidieR",
    "section": "The Super Heroes Dataset",
    "text": "The Super Heroes Dataset\n\n\n\nOpen source dataset from SuperHeroDB and available on Kaggle. It contains two tables:\n\nSuper Hero Information (i.e.¬†demographic data)\nSuper Hero Powers (i.e.¬†TRUE/FALSE for specific powers)\n\n\n\nSo by now you‚Äôve noticed we aren‚Äôt using patient data, so it‚Äôs worth briefly touching on the data we are using. We will be using open source super hero data from SuperHeroDB, delivered via Kaggle. There are two CSV tables available where one contains Hero Information like name, height, weight, eye color, etc. and the other contains a wide table pairing hero names to a boolean of specific powers.\nNext let‚Äôs look at how we‚Äôre actually going to extract this data using the REDCapR package"
  },
  {
    "objectID": "presentations/REDCapTidieR.html#on-the-shoulders-of-giants",
    "href": "presentations/REDCapTidieR.html#on-the-shoulders-of-giants",
    "title": "REDCapTidieR",
    "section": "On the Shoulders of Giants",
    "text": "On the Shoulders of Giants\n\n\nSome core REDCapR functions:\n\nredcap_read_oneshot\nredcap_metadata_read\nredcap_event_instruments\n\nNew as of v1.1.0\n\n\nRequirements:\n\nActive REDCap project\nA REDCap API URI1\nAPI token2\n\n\n\n\n\n\n\n\n\n\nWe‚Äôve been using REDCapR extensively for a while, and at it‚Äôs core the package does all the heavy lifting required to extract data and metadata on a REDCap project from the R console. If we all stand on the shoulders of giants, then REDCapR is the giant that REDCapTidieR has to thank.\nTo get started with API calls through these packages, you need a couple of things. First, an active REDCap database or project. Second, a REDCap API URI (in our case redcap.chop.edu/api/). Third an API token, since this is associated to your user rights you need to make sure you have the appropriate read/write privileges.\nLet‚Äôs assume I‚Äôve already done the work of preparing and importing this into a REDCap database so we can see what an export of the data looks like via REDCapR.\n\nSuch as https://redcap.chop.edu/api/Requires user API and Read/Write access"
  },
  {
    "objectID": "presentations/REDCapTidieR.html#superheroes-output",
    "href": "presentations/REDCapTidieR.html#superheroes-output",
    "title": "REDCapTidieR",
    "section": "SuperHeroes Output",
    "text": "SuperHeroes Output\n\n# Load applicable libraries:\nlibrary(dplyr)\nlibrary(REDCapR)\n\nsuperheroes_db <- redcap_read_oneshot(redcap_uri, token, verbose = FALSE)$data\n\nsuperheroes_db %>% \n  glimpse()\n\nRows: 6,700\nColumns: 16\n$ record_id                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, ‚Ä¶\n$ redcap_repeat_instrument    <chr> NA, \"super_hero_powers\", \"super_hero_power‚Ä¶\n$ redcap_repeat_instance      <dbl> NA, 1, 2, 3, 4, 5, 6, 7, NA, 1, 2, 3, 4, 5‚Ä¶\n$ name                        <chr> \"A-Bomb\", NA, NA, NA, NA, NA, NA, NA, \"Abe‚Ä¶\n$ gender                      <chr> \"Male\", NA, NA, NA, NA, NA, NA, NA, \"Male\"‚Ä¶\n$ eye_color                   <chr> \"yellow\", NA, NA, NA, NA, NA, NA, NA, \"blu‚Ä¶\n$ race                        <chr> \"Human\", NA, NA, NA, NA, NA, NA, NA, \"Icth‚Ä¶\n$ hair_color                  <chr> \"No Hair\", NA, NA, NA, NA, NA, NA, NA, \"No‚Ä¶\n$ height                      <dbl> 203, NA, NA, NA, NA, NA, NA, NA, 191, NA, ‚Ä¶\n$ weight                      <dbl> 441, NA, NA, NA, NA, NA, NA, NA, 65, NA, N‚Ä¶\n$ publisher                   <chr> \"Marvel Comics\", NA, NA, NA, NA, NA, NA, N‚Ä¶\n$ skin_color                  <chr> \"-\", NA, NA, NA, NA, NA, NA, NA, \"blue\", N‚Ä¶\n$ alignment                   <chr> \"good\", NA, NA, NA, NA, NA, NA, NA, \"good\"‚Ä¶\n$ heroes_information_complete <dbl> 0, NA, NA, NA, NA, NA, NA, NA, 0, NA, NA, ‚Ä¶\n$ power                       <chr> NA, \"Accelerated Healing\", \"Durability\", \"‚Ä¶\n$ super_hero_powers_complete  <dbl> NA, 0, 0, 0, 0, 0, 0, 0, NA, 0, 0, 0, 0, 0‚Ä¶\n\n\nRemember redcap_repeat_instrument and redcap_repeat_instance, they‚Äôre coming back!\n\nLet‚Äôs first load some applicable libraries and extract both the data and metadata of the database. A glimpse of the database shows us 6,700 rows with 16 columns, but oddly we seem to have a lot of NAs/missing data. And what might be a little more confusing is that our record_IDs are being repeated a number of times.\nLastly, there are two variables here (redcap_repeat_instrument and redcap_repeat_instance) which weren‚Äôt in our original database from the user side. They‚Äôll be coming up a lot today.\nLet‚Äôs look at a tibble structure to see if we can piece why this is."
  },
  {
    "objectID": "presentations/REDCapTidieR.html#superheroes-output-1",
    "href": "presentations/REDCapTidieR.html#superheroes-output-1",
    "title": "REDCapTidieR",
    "section": "SuperHeroes Output",
    "text": "SuperHeroes Output\n\n# View first 10 entries of SuperHeroes db tibble\nsuperheroes_db %>% \n  head(10)\n\n\n\n\n\n \n  \n    record_id \n    redcap_repeat_instrument \n    redcap_repeat_instance \n    name \n    gender \n    eye_color \n    race \n    hair_color \n    height \n    weight \n    publisher \n    skin_color \n    alignment \n    heroes_information_complete \n    power \n    super_hero_powers_complete \n  \n \n\n  \n    0 \n    NA \n    NA \n    A-Bomb \n    Male \n    yellow \n    Human \n    No Hair \n    203 \n    441 \n    Marvel Comics \n    - \n    good \n    0 \n    NA \n    NA \n  \n  \n    0 \n    super_hero_powers \n    1 \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    Accelerated Healing \n    0 \n  \n  \n    0 \n    super_hero_powers \n    2 \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    Durability \n    0 \n  \n  \n    0 \n    super_hero_powers \n    3 \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    Longevity \n    0 \n  \n  \n    0 \n    super_hero_powers \n    4 \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    Super Strength \n    0 \n  \n  \n    0 \n    super_hero_powers \n    5 \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    Stamina \n    0 \n  \n  \n    0 \n    super_hero_powers \n    6 \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    Camouflage \n    0 \n  \n  \n    0 \n    super_hero_powers \n    7 \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    Self-Sustenance \n    0 \n  \n  \n    1 \n    NA \n    NA \n    Abe Sapien \n    Male \n    blue \n    Icthyo Sapien \n    No Hair \n    191 \n    65 \n    Dark Horse Comics \n    blue \n    good \n    0 \n    NA \n    NA \n  \n  \n    1 \n    super_hero_powers \n    1 \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    Agility \n    0 \n  \n\n\n\n\n\n\nPerhaps still confusing, but we can at least see a pattern here. Now we can see how all of the NA‚Äôs trade off with the redcap_repeat_* variables. Notice how the first row for record_id 0 has all of its hero information filled out, but the repeat variables are NA, and then for the remainder of record_id 0‚Äôs rows that behavior reverses.\nI want to call out a few things here, this is the way REDCap presents you with a raw database. It‚Äôs one massive table, not always the most intuitive, and perhaps not even what we originally expect. This can be very cognitively overloading and a barrier to getting started with working with your data. The introduction of repeating instruments, as shown here, further complicates this."
  },
  {
    "objectID": "presentations/REDCapTidieR.html#redcap-repeating-instruments",
    "href": "presentations/REDCapTidieR.html#redcap-repeating-instruments",
    "title": "REDCapTidieR",
    "section": "REDCap Repeating Instruments",
    "text": "REDCap Repeating Instruments\n\n\nRecord Status Dashboard \n\n\nFront-End Data Entry UI  \n\n\n\n\nFrom the user side, this is what a repeating instance and associated instrument look like. Here on the left we have the same record status dashboard but now we have details expanded for two super power forms. Now we can see that heroes can have multiple powers, and heroes can have a different number of powers assigned to them as shown by 7 assigned to A-Bomb while only 3 are assigned to Adam Monroe.\nOn the drilled-down UI side, while small (my apologies),\nNext\nwe see that A-Bomb‚Äôs first power is ‚ÄúAccelerated Healing‚Äù under instance 1. The repeating form is a single text box entry field but can be repeated any number of times."
  },
  {
    "objectID": "presentations/REDCapTidieR.html#superheroes-repeating-output",
    "href": "presentations/REDCapTidieR.html#superheroes-repeating-output",
    "title": "REDCapTidieR",
    "section": "SuperHeroes Repeating Output",
    "text": "SuperHeroes Repeating Output\n\nsuperheroes_db %>% \n  filter(record_id == 0) %>% \n  select(record_id, contains(\"redcap_\"), name, power)\n\n\n\n\n\n \n  \n    record_id \n    redcap_repeat_instrument \n    redcap_repeat_instance \n    name \n    power \n  \n \n\n  \n    0 \n    NA \n    NA \n    A-Bomb \n    NA \n  \n  \n    0 \n    super_hero_powers \n    1 \n    NA \n    Accelerated Healing \n  \n  \n    0 \n    super_hero_powers \n    2 \n    NA \n    Durability \n  \n  \n    0 \n    super_hero_powers \n    3 \n    NA \n    Longevity \n  \n  \n    0 \n    super_hero_powers \n    4 \n    NA \n    Super Strength \n  \n  \n    0 \n    super_hero_powers \n    5 \n    NA \n    Stamina \n  \n  \n    0 \n    super_hero_powers \n    6 \n    NA \n    Camouflage \n  \n  \n    0 \n    super_hero_powers \n    7 \n    NA \n    Self-Sustenance \n  \n\n\n\n\n\n\n\nrecord_id, redcap_repeat_instrument, and recap_repeat_instance form a compound key.\n\n\n\n\nA compound key is the combination of 2+ columns necessary to identify a row uniquely in a table\n\n\n\nSo if we revisit record_id 0, and select variables of interest we can see that his hero information is only associated with non-repeating rows while each of his powers information gets a separate row associated with what repeat instrument and instance it belongs to.\nNext\nBecause of this structure, once repeating instruments are introduced to REDCap they form what‚Äôs known as a compound key for identifying individual observations. You can‚Äôt rely on the record_id anymore, even though its the primary identifier for our hero.\nNext\ncompound keys are combinations of 2 or more columns that together give the information necessary to uniquely identify a row in a table."
  },
  {
    "objectID": "presentations/REDCapTidieR.html#the-problem",
    "href": "presentations/REDCapTidieR.html#the-problem",
    "title": "REDCapTidieR",
    "section": "The Problem",
    "text": "The Problem\n\nEmpty data introduced as an artifact of repeating instruments\nData export is often times large and unwieldy\nMissing metadata linking field association to instruments\nRow identification is confusing and inconsistent\n\n\n\n\n\n\n\nThere are a number of problems with this which anyone here who has worked with repeating instruments or longitudinal REDCap projects has probably run into.\nFirst: empty data shown by all those NA values is not actually indicative of missingness, instead this is an artifact introduced as a side effect of having these compound keys tied to repeating instruments. This can force analysts to go back and either recreate data they need or jump through hoops to make up for data sparsity.\nSecond: Data exports often wind up becoming much larger than anticipated because of how many rows get introduced, making exports messy and unwieldy.\nThird: Without an innate link to the metadata, it isn‚Äôt possible from the data export to determine what forms are linked to what instrument. This can be a problem in longitudinal studies when you want to reference variables that only appear in specific events.\nFourth: Row identification is confusing and inconsistent. As we saw, compound keys make for variable row identifiers that may or may not contain all of the data analysts need."
  },
  {
    "objectID": "presentations/REDCapTidieR.html#introducing-redcaptidier",
    "href": "presentations/REDCapTidieR.html#introducing-redcaptidier",
    "title": "REDCapTidieR",
    "section": "Introducing REDCapTidieR",
    "text": "Introducing REDCapTidieR\nAt a glance:\n\nBuilt on top of REDCapR\nTakes two inputs: REDCap URI and REDCap API token\nReturns a set of tidy tibbles\n\nOne for each REDCap instrument\n\n\n\nSo we went over the problem, now let‚Äôs bring in the solution: REDCapTidieR. At a glance, there are only two main functions relying on the same two inputs from REDCapR: a URI and a valid API token. Under the hood, the package relies on REDCapR for all data extraction but instead does all the work of taking that large, messy table and turning it into a series of tidy tibbles for each project instrument.\n\ntibbles FYI are just tidy ways of displaying dataframes."
  },
  {
    "objectID": "presentations/REDCapTidieR.html#revisiting-superheroes",
    "href": "presentations/REDCapTidieR.html#revisiting-superheroes",
    "title": "REDCapTidieR",
    "section": "Revisiting Superheroes",
    "text": "Revisiting Superheroes\n\nlibrary(REDCapTidieR)\nsuperheroes_tidy <- read_redcap_tidy(redcap_uri, token)\n\nsuperheroes_tidy\n\n# A tibble: 2 √ó 3\n  redcap_form_name   redcap_data          structure   \n  <chr>              <list>               <chr>       \n1 super_hero_powers  <tibble [5,966 √ó 4]> repeating   \n2 heroes_information <tibble [734 √ó 12]>  nonrepeating\n\n\n\nThe core REDCapTidieR function is read_redcap_tidy, and here we can see the output which might look a little odd, but it‚Äôs definitely less overwhelming than the giant table we saw earier. What we have is a tibble where on the left we have the raw names of the instruments from REDCap, these were the two colorful columns on the Record Status Dashboard. On the right is the structure, i.e.¬†‚Äúrepeating‚Äù or ‚Äúnonrepeating.‚Äù\nHere in the middle, under data is where processed data resides in a list column."
  },
  {
    "objectID": "presentations/REDCapTidieR.html#revisiting-superheroes-1",
    "href": "presentations/REDCapTidieR.html#revisiting-superheroes-1",
    "title": "REDCapTidieR",
    "section": "Revisiting Superheroes",
    "text": "Revisiting Superheroes\n\n\nNon-Repeating Hero Information\n\nsuperheroes_tidy$redcap_data[[2]] %>% \n  head(10)\n\n\n\n\n\n \n  \n    record_id \n    name \n    gender \n    eye_color \n    race \n    hair_color \n    height \n    weight \n    publisher \n    skin_color \n    alignment \n    form_status_complete \n  \n \n\n  \n    0 \n    A-Bomb \n    Male \n    yellow \n    Human \n    No Hair \n    203 \n    441 \n    Marvel Comics \n    - \n    good \n    0 \n  \n  \n    1 \n    Abe Sapien \n    Male \n    blue \n    Icthyo Sapien \n    No Hair \n    191 \n    65 \n    Dark Horse Comics \n    blue \n    good \n    0 \n  \n  \n    2 \n    Abin Sur \n    Male \n    blue \n    Ungaran \n    No Hair \n    185 \n    90 \n    DC Comics \n    red \n    good \n    0 \n  \n  \n    3 \n    Abomination \n    Male \n    green \n    Human / Radiation \n    No Hair \n    203 \n    441 \n    Marvel Comics \n    - \n    bad \n    0 \n  \n  \n    4 \n    Abraxas \n    Male \n    blue \n    Cosmic Entity \n    Black \n    -99 \n    -99 \n    Marvel Comics \n    - \n    bad \n    0 \n  \n  \n    5 \n    Absorbing Man \n    Male \n    blue \n    Human \n    No Hair \n    193 \n    122 \n    Marvel Comics \n    - \n    bad \n    0 \n  \n  \n    6 \n    Adam Monroe \n    Male \n    blue \n    - \n    Blond \n    -99 \n    -99 \n    NBC - Heroes \n    - \n    good \n    0 \n  \n  \n    7 \n    Adam Strange \n    Male \n    blue \n    Human \n    Blond \n    185 \n    88 \n    DC Comics \n    - \n    good \n    0 \n  \n  \n    8 \n    Agent 13 \n    Female \n    blue \n    - \n    Blond \n    173 \n    61 \n    Marvel Comics \n    - \n    good \n    0 \n  \n  \n    9 \n    Agent Bob \n    Male \n    brown \n    Human \n    Brown \n    178 \n    81 \n    Marvel Comics \n    - \n    good \n    0 \n  \n\n\n\n\n\n\nRepeating Hero Powers\n\nsuperheroes_tidy$redcap_data[[1]] %>% \n  head(10)\n\n\n\n\n\n \n  \n    record_id \n    redcap_repeat_instance \n    power \n    form_status_complete \n  \n \n\n  \n    0 \n    1 \n    Accelerated Healing \n    0 \n  \n  \n    0 \n    2 \n    Durability \n    0 \n  \n  \n    0 \n    3 \n    Longevity \n    0 \n  \n  \n    0 \n    4 \n    Super Strength \n    0 \n  \n  \n    0 \n    5 \n    Stamina \n    0 \n  \n  \n    0 \n    6 \n    Camouflage \n    0 \n  \n  \n    0 \n    7 \n    Self-Sustenance \n    0 \n  \n  \n    1 \n    1 \n    Agility \n    0 \n  \n  \n    1 \n    2 \n    Accelerated Healing \n    0 \n  \n  \n    1 \n    3 \n    Cold Resistance \n    0 \n  \n\n\n\n\n\n\n\n\nIf we expand the list column elements through indexing, we can take a deeper look at the nonrepeating and repeating dataframe outputs. There are a number of things worth noting here:\n\nFirst in both of these tables we see there are no artificially generated NA artifact values.\nOn the left side, the non-repeating table shows that every record_id has a single row. On the right are repeating record_ids forming a compound key with the redcap_repeat_instance\nAdditionally, the redcap_repeat_ variables only appear in repeating sub tables.\nThis means that only the variables associated with the table will appear in it.\nThe presence of the primary key in the nonrepeating hero information table, and the compound key in the repeating hero powers table allows for easy joining.\n\nWhile this example REDCap only has two tables, most are going to have much more and it is very powerful to be able to join only the data you need and trust that the output contains all the relevant information."
  },
  {
    "objectID": "presentations/REDCapTidieR.html#revisiting-superheroes-2",
    "href": "presentations/REDCapTidieR.html#revisiting-superheroes-2",
    "title": "REDCapTidieR",
    "section": "Revisiting Superheroes",
    "text": "Revisiting Superheroes\n\n\nNon-Repeating Hero Information\n\nsuperheroes_tidy$redcap_data[[2]] %>% \n  head(5)\n\n\n\n\n\n \n  \n    record_id \n    --- \n    form_status_complete \n  \n \n\n  \n    0 \n    ... \n    0 \n  \n  \n    1 \n    ... \n    0 \n  \n  \n    2 \n    ... \n    0 \n  \n  \n    3 \n    ... \n    0 \n  \n  \n    4 \n    ... \n    0 \n  \n\n\n\n\n\n\nRepeating Hero Powers\n\nsuperheroes_tidy$redcap_data[[1]] %>% \n  head(5)\n\n\n\n\n\n \n  \n    record_id \n    --- \n    form_status_complete \n  \n \n\n  \n    0 \n    ... \n    0 \n  \n  \n    0 \n    ... \n    0 \n  \n  \n    0 \n    ... \n    0 \n  \n  \n    0 \n    ... \n    0 \n  \n  \n    0 \n    ... \n    0 \n  \n\n\n\n\n\n\n\n\nChange in *_form_status_complete to form_status_complete\n\n\nOne other thing I‚Äôd like to point out for those familiar with REDCap is the simplification of the form status completion variable. Typically in a REDCap output you‚Äôll have a ‚Äúx_form_status_complete‚Äù indicating whether a form is complete, incomplete, or unverified.\nSince the name of the form is indicated in the super tibble, we have a single variable that doesn‚Äôt change name to indicate completeness. This can be helpful if, for example, you‚Äôre relying on only complete data for analysis or want to check on the progression of data entry in your project. The form_status_complete variable will always be located at the end of the dataframe."
  },
  {
    "objectID": "presentations/REDCapTidieR.html#the-default-output",
    "href": "presentations/REDCapTidieR.html#the-default-output",
    "title": "REDCapTidieR",
    "section": "The Default Output",
    "text": "The Default Output\n\nlibrary(REDCapTidieR)\nsuperheroes_tidy <- read_redcap_tidy(redcap_uri, token)\n\nsuperheroes_tidy\n\n# A tibble: 2 √ó 3\n  redcap_form_name   redcap_data          structure   \n  <chr>              <list>               <chr>       \n1 super_hero_powers  <tibble [5,966 √ó 4]> repeating   \n2 heroes_information <tibble [734 √ó 12]>  nonrepeating\n\n\n\nHowever, indexing isn‚Äôt always the best way to go about data extraction. So while the initial tibble we showed earlier is extremely helpful we wanted to also provide a way to make the data accessible."
  },
  {
    "objectID": "presentations/REDCapTidieR.html#bind_tables-direct-to-environment",
    "href": "presentations/REDCapTidieR.html#bind_tables-direct-to-environment",
    "title": "REDCapTidieR",
    "section": "bind_tables Direct to Environment",
    "text": "bind_tables Direct to Environment\nThe function:\n\n# How `bind_tables()` is called:\nbind_tables <- function(.data,\n                        environment = global_env(),\n                        redcap_form_name = NULL,\n                        structure = NULL)\n  \n  # How it looks in practice:\n  read_redcap_tidy(redcap_uri, token) %>% \n  bind_tables()\n\nClear out our envionrment:\n\nrm(list = ls())\nls.str(envir = globalenv())\n\n\nEmpty output, no global environment objects\n\nReload the superheroes_tidy dataset, pipe to bind_tables, check environment:\n\nsuperheroes_tidy %>%\n  bind_tables()\n\nls.str(envir = globalenv())\n\nheroes_information : tibble [734 √ó 12] (S3: tbl_df/tbl/data.frame)\nsuper_hero_powers : tibble [5,966 √ó 4] (S3: tbl_df/tbl/data.frame)\nsuperheroes_tidy : tibble [2 √ó 3] (S3: tbl_df/tbl/data.frame)\n\n\n\nThe second main function we‚Äôve introduced to REDCapTidieR is Stephan‚Äôs brain child. Using the bind_tables helper function, we can take the table outputs of the redcap_data column from our TidieR output and place them directly into the global environment or any environment of our choosing.\nFor those of you who don‚Äôt know, environments are essentially a variant of lists in R. The most common one you probably work with is the global environment displayed in the panel of your RStudio IDE, but you can also make other environments to call from.\nFor this function, you can specify an environment to load to, the repeat/nonrepeat structure you‚Äôre interested in, and any specific tables. However, the default behavior with no arguments supplied will load directly to the global environment with all available objects."
  },
  {
    "objectID": "presentations/REDCapTidieR.html#bind_tables-direct-to-environment-1",
    "href": "presentations/REDCapTidieR.html#bind_tables-direct-to-environment-1",
    "title": "REDCapTidieR",
    "section": "bind_tables Direct to Environment",
    "text": "bind_tables Direct to Environment\n\n\n\n\n\n\nAnd if you‚Äôre used to looking at your environment in RStudio, this is exactly the same as taking your environment window pane on the left and populating it with the objects on the right."
  },
  {
    "objectID": "presentations/REDCapTidieR.html#longitudinal-redcap-projects",
    "href": "presentations/REDCapTidieR.html#longitudinal-redcap-projects",
    "title": "REDCapTidieR",
    "section": "Longitudinal REDCap Projects",
    "text": "Longitudinal REDCap Projects\n\n\n\n\n\n\n\n\n\n\nClassic\nLongitudinal,\none arm\nLongitudinal,\nmulti-arm\n\n\n\n\nNonrepeated\nrecord_id\nrecord_id +\nredcap_event\nrecord_id +\nredcap_event +\nredcap_arm\n\n\nRepeated\nrecord_id +\nredcap_repeat_instance\nrecord_id +\nredcap_repeat_instance +\nredcap_event\nrecord_id +\nredcap_repeat_instance +\nredcap_event +\nredcap_arm\n\n\n\n\nNow that we have some familiarity with REDCap, its outputs, and what we can expect REDCapTidieR to achieve, I know what you‚Äôre asking yourself: but Rich, what about longitudinal REDCap projects with multiple arms? Well don‚Äôt worry, because REDCapTidieR handles that too.\nIf you don‚Äôt know what I‚Äôm talking about, this table helps break down the three main archetypes of REDCap projects and their repeating/nonrepeating counterparts. There are ‚ÄúClassic‚Äù projects which have no longitudinal elements, i.e.¬†no events or arms. There are longitudinal projects with no arms, or 1 by default. And there are projects with many.\nWe‚Äôre already familiar with record_id and redcap_repeat_instance/instrument. What longitudinal events and arms add are these corresponding event and arm variables that further expand our compound keys. So what you see here are all of the required variables necessary to uniquely identify a row in a project type."
  },
  {
    "objectID": "presentations/REDCapTidieR.html#redcap-projects-with-arms",
    "href": "presentations/REDCapTidieR.html#redcap-projects-with-arms",
    "title": "REDCapTidieR",
    "section": "REDCap Projects with Arms",
    "text": "REDCap Projects with Arms\n\n\n\n\n\n\n\n\n\nredcap_long_arms_tidy <- read_redcap_tidy(redcap_uri, token)\n\nredcap_long_arms_tidy\n\n# A tibble: 3 √ó 3\n  redcap_form_name redcap_data      structure   \n  <chr>            <list>           <chr>       \n1 repeated         <tibble [9 √ó 7]> repeating   \n2 nonrepeated      <tibble [8 √ó 6]> nonrepeating\n3 nonrepeated2     <tibble [3 √ó 6]> nonrepeating\n\n\n\nIn the front end UI, we have a rudimentary mockup of a database that has all of these elements as well as multiple arms. Notice the inclusion of Events 1, 2, and 3 and Arms 1 and 2 in separate tabs. You can also notice here how things get pretty complicated. Records 1-3 appear in Arm1, events 1 and 2, but Record 4 is only Arm2, events 1 and 3.\nThe output of a read_redcap_tidy call is still the same. The forms we expect appear in the form names, we have dataframe elements, and indicative structure details."
  },
  {
    "objectID": "presentations/REDCapTidieR.html#redcap-projects-with-arms-1",
    "href": "presentations/REDCapTidieR.html#redcap-projects-with-arms-1",
    "title": "REDCapTidieR",
    "section": "REDCap Projects with Arms",
    "text": "REDCap Projects with Arms\n\n\n\nredcap_long_arms_tidy$redcap_data[[1]]\n\n\n\n\n\n \n  \n    record_id \n    redcap_repeat_instance \n    redcap_event \n    redcap_arm \n    repeat_1 \n    repeat_2 \n    form_status_complete \n  \n \n\n  \n    1 \n    1 \n    event_1 \n    1 \n    1 \n    2 \n    0 \n  \n  \n    1 \n    2 \n    event_1 \n    1 \n    3 \n    4 \n    0 \n  \n  \n    1 \n    3 \n    event_1 \n    1 \n    5 \n    6 \n    0 \n  \n  \n    1 \n    1 \n    event_2 \n    1 \n    A \n    B \n    0 \n  \n  \n    1 \n    2 \n    event_2 \n    1 \n    C \n    D \n    0 \n  \n  \n    3 \n    1 \n    event_1 \n    1 \n    C \n    D \n    0 \n  \n  \n    3 \n    1 \n    event_2 \n    1 \n    E \n    F \n    0 \n  \n  \n    3 \n    2 \n    event_2 \n    1 \n    G \n    H \n    0 \n  \n  \n    4 \n    1 \n    event_3 \n    2 \n    R1 \n    R2 \n    0 \n  \n\n\n\n\n\n\n\nredcap_long_arms_tidy$redcap_data[[3]]\n\n\n\n\n\n \n  \n    record_id \n    redcap_event \n    redcap_arm \n    nonrepeat_3 \n    nonrepeat_4 \n    form_status_complete \n  \n \n\n  \n    1 \n    event_1 \n    1 \n    3 \n    4 \n    0 \n  \n  \n    2 \n    event_1 \n    1 \n    5 \n    6 \n    0 \n  \n  \n    3 \n    event_1 \n    1 \n    NA \n    NA \n    0 \n  \n\n\n\n\n\n\n\n\nAnd on the backend, despite all this added complexity, the really nice thing is all that‚Äôs changed is the addition of redcap_event and redcap_arm which are just two more elements needed for your compound key joins for unique row identification.\nOne thing I‚Äôll note is REDCapTidieR as a default will automatically detect and remove the arm variable if only 1 arm exists in your longitudinal project."
  },
  {
    "objectID": "presentations/REDCapTidieR.html#try-it-for-yourself",
    "href": "presentations/REDCapTidieR.html#try-it-for-yourself",
    "title": "REDCapTidieR",
    "section": "Try it for Yourself!*",
    "text": "Try it for Yourself!*\n\n\n\n\n\nInstall from public GitHub and view the pkgdown site\n*REDCapTidieR is in early alpha, but hopefully for not for long!\n\nSo thank you for sticking with me this far, I realize it can be a bit dry but hopefully you can see how our package can help alleviate some of the mental burden of dealing with raw REDCap data exports. You can learn more on our pkgdown and install the package yourself on our public GitHub repo, just be aware it is still in early development."
  },
  {
    "objectID": "presentations/REDCapTidieR.html#future-work",
    "href": "presentations/REDCapTidieR.html#future-work",
    "title": "REDCapTidieR",
    "section": "Future Work",
    "text": "Future Work\n\nraw_or_label compatibility\nextract_table and extract_tables functions\nRelease to CRAN\n\n\nBefore I close up, we have a bit more work to do. We want to extend accessibility and compatibility to include appropriate handling of raw data elements as well as labels depending on user specification. Right now the default is to only export raw data, but this is high on our priority list to fix.\nWe will be adding a few extraction functions to allow for tables to be extracted direct to the console or for variable assignment like you typically would expect so you don‚Äôt have to just use environments and binding.\nAnd lastly, hopefully we‚Äôll get this accepted to CRAN! Would be pretty neat and my first CRAN package if possible so stay tuned!"
  },
  {
    "objectID": "presentations/REDCapTidieR.html#redcap-metadata",
    "href": "presentations/REDCapTidieR.html#redcap-metadata",
    "title": "REDCapTidieR",
    "section": "REDCap Metadata",
    "text": "REDCap Metadata\n\nmetadata <- redcap_metadata_read(redcap_uri, token)$data\n\nmetadata %>%\n  kbl(booktabs = T, escape = F, table.attr = \"style='width:20%;'\") %>%\n    # options for HTML output\n    kable_styling(bootstrap_options = c(\"striped\", \"hover\", \"bordered\"), \n                  position = \"center\",\n                  full_width = F,\n                  font_size = 12,\n                  fixed_thead = T) %>% \n  column_spec(1, bold = T) %>% \n  scroll_box(width = \"100%\", height = \"300px\")\n\n\n\n \n  \n    field_name \n    form_name \n    section_header \n    field_type \n    field_label \n    select_choices_or_calculations \n    field_note \n    text_validation_type_or_show_slider_number \n    text_validation_min \n    text_validation_max \n    identifier \n    branching_logic \n    required_field \n    custom_alignment \n    question_number \n    matrix_group_name \n    matrix_ranking \n    field_annotation \n  \n \n\n  \n    record_id \n    nonrepeated \n    NA \n    text \n    Record ID \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n  \n  \n    nonrepeat_1 \n    nonrepeated \n    NA \n    text \n    Text Box Input \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n  \n  \n    nonrepeat_2 \n    nonrepeated \n    NA \n    text \n    Text Box Input \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n  \n  \n    nonrepeat_3 \n    nonrepeated2 \n    NA \n    text \n    Test data \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n  \n  \n    nonrepeat_4 \n    nonrepeated2 \n    NA \n    text \n    Test data \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n  \n  \n    repeat_1 \n    repeated \n    NA \n    text \n    Text Box Input: \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n  \n  \n    repeat_2 \n    repeated \n    NA \n    text \n    Text Box Input: \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n  \n  \n    text \n    data_field_types \n    NA \n    text \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n  \n  \n    note \n    data_field_types \n    NA \n    notes \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n  \n  \n    calculated \n    data_field_types \n    NA \n    calc \n    NA \n    1+1 \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n  \n  \n    dropdown_single \n    data_field_types \n    NA \n    dropdown \n    NA \n    choice_1, one | choice_2, two | choice_3, three \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n  \n  \n    radio_single \n    data_field_types \n    NA \n    radio \n    NA \n    choice_1, A | choice_2, B | choice_3, C \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n  \n  \n    checkbox_multiple \n    data_field_types \n    NA \n    checkbox \n    NA \n    1, 1 | 2, 2 | 3, 3 | 4, 4 | 5, 5 | 6, 6 | 7, 7 | 8, 8 | 9, 9 | 10, 10 \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n  \n  \n    checkbox_multiple_2 \n    data_field_types \n    NA \n    checkbox \n    NA \n    Aa, Red | B1b, Green | Ccc2, Blue | 3dddd, Yellow | 4eeee5, Purple \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n  \n  \n    yesno \n    data_field_types \n    NA \n    yesno \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n  \n  \n    truefalse \n    data_field_types \n    NA \n    truefalse \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n  \n  \n    signature \n    data_field_types \n    NA \n    file \n    NA \n    NA \n    NA \n    signature \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n  \n  \n    fileupload \n    data_field_types \n    NA \n    file \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n  \n  \n    slider \n    data_field_types \n    NA \n    slider \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    RH \n    NA \n    NA \n    NA \n    NA \n  \n  \n    descriptive \n    data_field_types \n    begin new section \n    descriptive \n    DESCRIPTIVE \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n  \n  \n    text_dmy \n    text_input_validation_types \n    NA \n    text \n    Text DMY \n    NA \n    NA \n    date_dmy \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n  \n  \n    text_mdy \n    text_input_validation_types \n    NA \n    text \n    Text MDY \n    NA \n    NA \n    date_mdy \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n  \n  \n    text_ymd \n    text_input_validation_types \n    NA \n    text \n    Text YMD \n    NA \n    NA \n    date_ymd \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n  \n  \n    text_dmy_hm \n    text_input_validation_types \n    NA \n    text \n    Text DMY HM \n    NA \n    NA \n    datetime_dmy \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n  \n  \n    text_mdy_hm \n    text_input_validation_types \n    NA \n    text \n    Text MDY HM \n    NA \n    NA \n    datetime_mdy \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n  \n  \n    text_ymd_hm \n    text_input_validation_types \n    NA \n    text \n    Text YMD HM \n    NA \n    NA \n    datetime_ymd \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n  \n  \n    text_dmy_hms \n    text_input_validation_types \n    NA \n    text \n    Text DMY HMS \n    NA \n    NA \n    datetime_seconds_dmy \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n  \n  \n    text_mdy_hms \n    text_input_validation_types \n    NA \n    text \n    Text MDY HMS \n    NA \n    NA \n    datetime_seconds_mdy \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n  \n  \n    text_ymd_hms \n    text_input_validation_types \n    NA \n    text \n    Text YMD HMS \n    NA \n    NA \n    datetime_seconds_ymd \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n  \n  \n    text_mrn \n    text_input_validation_types \n    NA \n    text \n    Text MRN \n    NA \n    NA \n    mrn_8d \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n  \n  \n    text_phone \n    text_input_validation_types \n    NA \n    text \n    Text Phone \n    NA \n    NA \n    phone \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n  \n  \n    text_ssn \n    text_input_validation_types \n    NA \n    text \n    Text SSN \n    NA \n    NA \n    ssn \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n  \n  \n    text_hms \n    text_input_validation_types \n    NA \n    text \n    Text HMS \n    NA \n    NA \n    time_hh_mm_ss \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n  \n  \n    text_hm \n    text_input_validation_types \n    NA \n    text \n    Text HM \n    NA \n    NA \n    time \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n  \n  \n    text_ms \n    text_input_validation_types \n    NA \n    text \n    Text MS \n    NA \n    NA \n    time_mm_ss \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n  \n  \n    text_zip \n    text_input_validation_types \n    NA \n    text \n    Text ZIP \n    NA \n    NA \n    zipcode \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA \n    NA"
  }
]